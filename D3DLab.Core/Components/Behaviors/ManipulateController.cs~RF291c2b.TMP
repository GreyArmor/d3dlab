using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using D3DLab.Core.Entities;

namespace D3DLab.Core.Components.Behaviors {
    public sealed class ManipulateController : InputComponent, IAttachTo<VisualEntity>, ManipulateController.IInputHandler {
        public enum InputStates {
            Idle,
            Translate
        }
        public interface IInputHandler {
             
        }
        private VisualEntity parent;
        public ManipulateController(Control control) : base(control) {

        }
        public void OnAttach(VisualEntity parent) {
            this.parent = parent;
        }


        protected sealed class ManipulateStateProcessor : InputComponent.StateProcessor {
            private readonly IInputHandler inputHandler;
            public ManipulateStateProcessor(StateDictionary states, IInputHandler inputHandler) : base(states) {
                this.inputHandler = inputHandler;
            }

            public override void InvokeHandler<T>(Action<T> action) {
                action((T)inputHandler);
            }
        }
        protected sealed class InputIdleState : InputStateMachine {
            public InputIdleState(StateProcessor processor) : base(processor) { }
            public override bool OnMouseDown(InputStateDate state) {
                switch (state.Buttons) {
                    case MouseButtons.Left:
                        SwitchTo((int)InputStates.Translate, state);
                        break;
                }
                return base.OnMouseDown(state);
            }
            
        }

    }
}
