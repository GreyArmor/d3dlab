using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using D3DLab.Core.Entities;

namespace D3DLab.Core.Components.Behaviors {
    public sealed class ManipulateInputComponent : InputComponent, IAttachTo<VisualEntity>, ManipulateInputComponent.IInputHandler {
        public enum InputStates {
            Idle,
            Translate
        }
        public interface IInputHandler : IHandler {
            void Translate(InputStateDate state);
        }
        private VisualEntity parent;
        public ManipulateInputComponent(Control control) : base(control) {}
        public void OnAttach(VisualEntity parent) { this.parent = parent; }
        protected override InputState GetIdleState() {
            var states = new StateDictionary();
            states.Add((int)InputStates.Idle, s => new InputIdleState(s));
            states.Add((int)InputStates.Translate, s => new InputTranslateState(s));

            var router = new StateHandleProcessor<IInputHandler>(states, this);
            router.SwitchTo((int)InputStates.Idle, new InputStateDate(control));
            return router;
        }
        private sealed class InputIdleState : InputStateMachine {
            public InputIdleState(StateProcessor processor) : base(processor) { }
            public override bool OnMouseDown(InputStateDate state) {
                switch (state.Buttons) {
                    case MouseButtons.Left:
                        SwitchTo((int)InputStates.Translate, state);
                        break;
                }
                return base.OnMouseDown(state);
            }
            
        }

        private sealed class InputTranslateState : InputStateMachine {
            public InputTranslateState(StateProcessor processor) : base(processor) {

            }

            public override bool OnMouseDown(InputStateDate state) {
                return base.OnMouseDown(state);
            }

            public override bool OnMouseUp(InputStateDate state) {
                if (!state.IsPressed(MouseButtons.Left)) {
                    SwitchTo((int)InputStates.Idle, state);
                }
                return base.OnMouseUp(state);
            }

            public override bool OnMouseMove(InputStateDate state) {
                Processor.InvokeHandler<IInputHandler>(x=>x.Translate(state));
                return true;
            }
        }

        public void Translate(InputStateDate state) {
            
        }


    }
}
