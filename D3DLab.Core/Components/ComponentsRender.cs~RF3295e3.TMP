using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using D3DLab.Core.Render;
using D3DLab.Core.Render.Context;
using D3DLab.Core.Visual3D;
using HelixToolkit.Wpf.SharpDX;
using HelixToolkit.Wpf.SharpDX.Render;
using HelixToolkit.Wpf.SharpDX.WinForms;
using SharpDX;
using SharpDX.Direct3D11;
using IRenderable = D3DLab.Core.Visual3D.IRenderable;
using RenderContext = D3DLab.Core.Render.Context.RenderContext;

namespace D3DLab.Core.Components {
    //    public interface IContainerComponent {
    //        IEnumerable<IRenderable> Items { get; }
    //        void Add(IRenderable item);
    //        void Remove(IRenderable item);
    //    }

    public sealed class World {
        public Matrix WorldMatrix { get; set; }
        public int LightCount { get; set; }
       // public OrthographicCamera Camera { get; set; }

        public World() {
            WorldMatrix = Matrix.Identity;
        }
    }

    public sealed class Graphics {
        public SharpDevice SharpDevice { get; set; }
        public EffectVariables Variables { get; set; }
    }

    public interface IRenderComponent {
        void Update();
        void Render(World world, Graphics graphics);
    }

    public abstract class RenderComponentBehavior : Component, IRenderComponent {
        public RenderTechnique RenderTechnique { get; set; }
        
        private readonly CameraContext cameraContext;
        private EffectContext effectContext;
        private readonly LightRenderContext lightRenderContext;
        private readonly IlluminationSettings illuminationSettings;

        protected RenderComponentBehavior() {
            RenderTechnique = Techniques.RenderPhong;
            cameraContext = new CameraContext();
            
            lightRenderContext = new LightRenderContext();
            illuminationSettings = new IlluminationSettings();

            illuminationSettings.Ambient = 1;
            illuminationSettings.Diffuse = 1;
            illuminationSettings.Specular = 1;
            illuminationSettings.Shine = 1;
            illuminationSettings.Light = 1;
        }

        public void Render(World world, Graphics graphics) {
            var sharpDevice = graphics.SharpDevice;

            var effectsManager = new HelixToolkit.Wpf.SharpDX.EffectsManager(sharpDevice.Device);
            effectContext = new EffectContext(effectsManager, effectsManager.GetEffect(this.RenderTechnique));

            var bgColor = new Color4(0.2f, 0.2f, 0.2f, 1);
            sharpDevice.Apply();
            sharpDevice.Clear(bgColor);

            lightRenderContext.ClearLights();
            cameraContext.RenderCamera(effectContext);

            var rt = RenderTechnique;
            rt.UpdateVariables(effectContext.Effect);
            var techniqueContext = new TechniqueContext(rt, effectContext.EffectsManager);
            //                            techniqueContext.InitEffect(effectContext.EffectsManager);

            effectContext.Effect.Variables()
                .LightAmbient.Set(new Color4((float)illuminationSettings.Ambient).ChangeAlpha(1f));
            effectContext.Effect.Variables()
                .IllumDiffuse.Set(new Color4((float)illuminationSettings.Diffuse).ChangeAlpha(1f));
            effectContext.Effect.Variables().IllumShine.Set((float)illuminationSettings.Shine);
            effectContext.Effect.Variables()
                .IllumSpecular.Set(new Color4((float)illuminationSettings.Specular).ChangeAlpha(1f));

            var context = new RenderContext(sharpDevice, effectContext,
                cameraContext, lightRenderContext, techniqueContext,
                illuminationSettings);

            OnRender(context);

        }
        protected abstract void OnRender(RenderContext context);
    }
    public class VisualRenderComponent : RenderComponentBehavior {
        public Matrix Transform { get; set; }
        public BoundingBox Bounds { get; set; }
        private Geometry3D geometry;
        public Geometry3D Geometry {
            get { return geometry; }
            set {
                geometry = value;
                this.Bounds = geometry.Positions.ToBoundingBox();
            }
        }
        public Material Material { get; set; }
        public Material BackMaterial { get; set; }
      
        public CullMode CullMaterial { get; set; }
        public int DepthBias { get; set; }
        public double Thickness { get; set; }
        private double Smoothness { get; set; }

        private RenderDataNew renderData;
        private DuplexMaterialRenderData materialData;

        public VisualRenderComponent() : base() {
            CullMaterial = CullMode.Back;
          
            renderData = new RenderDataNew(RenderTechnique);
            Transform = Matrix.Identity;
        }

        public override void Update() {
            DisposeEx.CreateInstance(ref renderData, new RenderDataNew(RenderTechnique));
            renderData.Transform = Matrix.Identity;// this.CalcRenderMatrix(renderContext, Matrix.Identity);
            renderData.CullMode = CullMaterial;
            renderData.DepthBias = DepthBias;
            renderData.Thickness = (float)Thickness;
            renderData.Smoothness = (float)Smoothness;
            renderData.Instances = new Matrix[0];
            foreach (var array in renderData.RenderSources.Arrays) {
                array.Update(Geometry);
            }

          //  renderData.Update(sharpDevice);

            DisposeEx.CreateInstance(ref materialData, new DuplexMaterialRenderData(Material, BackMaterial));
           // materialData.Update(sharpDevice);
            base.Update();
        }
        protected override void OnRender(RenderContext context) {
            materialData.Render(context);
            renderData.Render(context);
         //   base.OnRender(context);
        }
    }
    public class ComponentsRender : Component, IRenderComponent, IAttachTo<ComponentContainer> {
        public override void Update() {
            foreach (var child in Parent.GetComponents<IRenderComponent>()) {
                if(child == this) {  continue; }
                child.Update();
            }
        }
        public void Render(World world, Graphics graphics) {
            foreach (var child in Parent.GetComponents<IRenderComponent>()) {
                if (child == this) { continue; }
                child.Render(world,graphics);
            }
        }

        public ComponentsRender() : base() {}
        public ComponentContainer Parent { get; private set; }

        public void OnAttach(ComponentContainer parent) {
            this.Parent = parent;
        }
    }
}
