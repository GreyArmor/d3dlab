7c7
< namespace HelixToolkit.Wpf.SharpDX
---
> namespace HelixToolkit.Wpf
14d13
<     using System.Linq;
15a15
>     using System.Windows.Media;
17,37c17,18
< 
<     using global::SharpDX;
< 
<     using Color = global::SharpDX.Color4;
<     using Int32Collection = System.Collections.Generic.List<int>;
<     using Object3DGroup = System.Collections.Generic.List<Object3D>;
<     using Plane3D = global::SharpDX.Plane;
<     using Point = global::SharpDX.Vector2;
<     using Point3D = global::SharpDX.Vector3;
<     using Point3DCollection = System.Collections.Generic.List<global::SharpDX.Vector3>;
<     using PointCollection = System.Collections.Generic.List<global::SharpDX.Vector2>;
<     using Ray3D = global::SharpDX.Ray;
<     using Vector3D = global::SharpDX.Vector3;
< 
<     public class Object3D
<     {
<         public Geometry3D Geometry { get; set; }
<         public Material Material { get; set; }
<         public Matrix Transform { get; set; }
<         public string Name { get; set; }
<     }
---
>     using System.Windows.Media.Media3D;
>     using System.Windows.Threading;
41a23,27
>     public class ObjReader : ModelReader
>     {
>         /// <summary>
>         /// The smoothing group maps.
>         /// </summary>
43,47c29,30
<     /// See the file format specifications at
<     /// http://en.wikipedia.org/wiki/Obj
<     /// http://en.wikipedia.org/wiki/Material_Template_Library
<     /// http://www.martinreddy.net/gfx/3d/OBJ.spec
<     /// http://www.eg-models.de/formats/Format_Obj.html
---
>         /// The outer dictionary maps from a smoothing group number to a dictionary.
>         /// The inner dictionary maps from an obj file vertex index to a vertex index in the current group.
49,50c32,43
<     public class ObjReader : IModelReader
<     {
---
>         private readonly Dictionary<int, Dictionary<int, int>> smoothingGroupMaps;
> 
>         /// <summary>
>         /// The current smoothing group.
>         /// </summary>
>         private int currentSmoothingGroup;
> 
>         /// <summary>
>         /// The line number of the line being parsed.
>         /// </summary>
>         private int currentLineNo;
> 
54c47,49
<         public ObjReader()
---
>         /// <param name="dispatcher">The dispatcher.</param>
>         public ObjReader(Dispatcher dispatcher = null)
>             : base(dispatcher)
61,62d55
<             this.DefaultColor = global::SharpDX.Color.Gold;
< 
71d63
<         }
73,80c65,70
<         /// <summary>
<         /// Gets or sets the default color.
<         /// </summary>
<         /// <value>The default color.</value>
<         /// <remarks>
<         /// The default value is Colors.Gold.
<         /// </remarks>
<         public Color DefaultColor { get; set; }
---
>             // File format specifications
>             // http://en.wikipedia.org/wiki/Obj
>             // http://en.wikipedia.org/wiki/Material_Template_Library
>             // http://www.martinreddy.net/gfx/3d/OBJ.spec
>             // http://www.eg-models.de/formats/Format_Obj.html
>         }
92c82
<         /// Gets or sets a value indicating whether to skip transparency values ("Tr") in the material files.
---
>         /// Gets or sets a value indicating whether to skip transparency values in the material files.
98,100c88,90
<         /// This option is added to allow disabling the "Tr" values in files where it has been defined incorrectly.
<         /// The transparency values ("Tr") are interpreted as 0 = transparent, 1 = opaque.
<         /// The dissolve values ("d") are interpreted as 0 = transparent, 1=opaque.
---
>         /// This option is added to allow disabling the <code>Tr</code> values in files where it has been defined incorrectly.
>         /// The transparency values (<code>Tr</code>) are interpreted as 0 = transparent, 1 = opaque.
>         /// The dissolve values (<code>d</code>) are interpreted as 0 = transparent, 1 = opaque.
131c121,147
<         /// Gets or sets the path to the textures.
---
>         /// Gets or sets the current material.
>         /// </summary>
>         private Material CurrentMaterial { get; set; }
> 
>         /// <summary>
>         /// Gets the current group.
>         /// </summary>
>         private Group CurrentGroup
>         {
>             get
>             {
>                 if (this.Groups.Count == 0)
>                 {
>                     this.AddGroup("default");
>                 }
> 
>                 return this.Groups[this.Groups.Count - 1];
>             }
>         }
> 
>         /// <summary>
>         /// Gets or sets the normal vectors.
>         /// </summary>
>         private IList<Vector3D> Normals { get; set; }
> 
>         /// <summary>
>         /// Gets or sets the points.
133,134c149
<         /// <value>The texture path.</value>
<         public string TexturePath { get; set; }
---
>         private IList<Point3D> Points { get; set; }
137c152
<         /// Additional info how to treat the model
---
>         /// Gets or sets the stream reader.
139c154,159
<         public ModelInfo ModelInfo { get; private set; }
---
>         private StreamReader Reader { get; set; }
> 
>         /// <summary>
>         /// Gets or sets the texture coordinates.
>         /// </summary>
>         private IList<Point> TextureCoordinates { get; set; }
144,150c164,166
<         /// <param name="path">
<         /// The path.
<         /// </param>
<         /// <returns>
<         /// The model.
<         /// </returns>
<         public Object3DGroup Read(string path, ModelInfo info = default(ModelInfo))
---
>         /// <param name="path">The path.</param>
>         /// <returns>The model.</returns>
>         public override Model3DGroup Read(string path)
153,154d168
<             this.ModelInfo = info;
< 
164,170c178,180
<         /// <param name="s">
<         /// The stream.
<         /// </param>
<         /// <returns>
<         /// The model.
<         /// </returns>
<         public Object3DGroup Read(Stream s, ModelInfo info = default(ModelInfo))
---
>         /// <param name="s">The stream.</param>
>         /// <returns>The model.</returns>
>         public override Model3DGroup Read(Stream s)
193,195d202
<                     try
<                     {
< 
281,285d287
<                     catch (Exception ex)
<                     {
<                         System.Windows.MessageBox.Show(string.Format("Error loading object: {0}", ex.Message), "Error", MessageBoxButton.OKCancel);
<                     }
<                 }
294,304c296,300
<         /// <param name="path">
<         /// The path.
<         /// </param>
<         /// <returns>
<         /// A Model3D object containing the model.
<         /// </returns>
<         /// <remarks>
<         /// This is a file format used by Helix Toolkit only.
<         /// Use the GZipHelper class to compress an .obj file.
<         /// </remarks>
<         public Object3DGroup ReadZ(string path)
---
>         /// <param name="path">The path.</param>
>         /// <returns>A Model3D object containing the model.</returns>
>         /// <remarks>This is a file format used by Helix Toolkit only.
>         /// Use the GZipHelper class to compress an .obj file.</remarks>
>         public Model3DGroup ReadZ(string path)
314,370d309
< 
< 
<         /// <summary>
<         /// The smoothing group maps.
<         /// </summary>
<         /// <remarks>
<         /// The outer dictionary maps from a smoothing group number to a Dictionary&lt;int,int&gt;.
<         /// The inner dictionary maps from an obj file vertex index to a vertex index in the current group.
<         /// </remarks>
<         private readonly Dictionary<int, Dictionary<int, int>> smoothingGroupMaps;
< 
<         /// <summary>
<         /// The current smoothing group.
<         /// </summary>
<         private int currentSmoothingGroup;
< 
<         /// <summary>
<         /// The line number of the line being parsed.
<         /// </summary>
<         private int currentLineNo;
< 
<         /// <summary>
<         /// Gets the current group.
<         /// </summary>
<         private Group CurrentGroup
<         {
<             get
<             {
<                 if (this.Groups.Count == 0)
<                 {
<                     this.AddGroup("default");
<                 }
< 
<                 return this.Groups[this.Groups.Count - 1];
<             }
<         }
< 
<         /// <summary>
<         /// Gets or sets the normals.
<         /// </summary>
<         private IList<Vector3D> Normals { get; set; }
< 
<         /// <summary>
<         /// Gets or sets the points.
<         /// </summary>
<         private IList<Point3D> Points { get; set; }
< 
<         /// <summary>
<         /// Gets or sets the stream reader.
<         /// </summary>
<         private StreamReader Reader { get; set; }
< 
<         /// <summary>
<         /// Gets or sets the texture coordinates.
<         /// </summary>
<         private IList<Point> TextureCoordinates { get; set; }
< 
383c322
<             return System.Windows.Media.Color.FromRgb((byte)(fields[0] * 255), (byte)(fields[1] * 255), (byte)(fields[2] * 255)).ToColor4();
---
>             return Color.FromRgb((byte)(fields[0] * 255), (byte)(fields[1] * 255), (byte)(fields[2] * 255));
454c393
<             this.Groups.Add(new Group(name));
---
>             this.Groups.Add(new Group(name, this.CurrentMaterial ?? this.DefaultMaterial));
465c404
<                 this.CurrentGroup.AddMesh();
---
>                 this.CurrentGroup.AddMesh(this.CurrentMaterial ?? this.DefaultMaterial);
508c447
<         /// texture coordinates, and normals respectively. A number may be omitted if,
---
>         /// texture coordinates, and normal vectors respectively. A number may be omitted if,
544,545c483,484
<                 int vti = ff.Length > 1 && ff[1].Length > 0 ? int.Parse(ff[1]) : -1;
<                 int vni = ff.Length > 2 && ff[2].Length > 0 ? int.Parse(ff[2]) : -1;
---
>                 int vti = ff.Length > 1 && ff[1].Length > 0 ? int.Parse(ff[1]) : int.MaxValue;
>                 int vni = ff.Length > 2 && ff[2].Length > 0 ? int.Parse(ff[2]) : int.MaxValue;
574c513
<                 if (vti == -1)
---
>                 if (vti == int.MaxValue)
577,578c516
<                     //builder.CreateTextureCoordinates = false;
<                     builder.TextureCoordinates = null;
---
>                     builder.CreateTextureCoordinates = false;
581c519
<                 if (vni == -1)
---
>                 if (vni == int.MaxValue)
584,585c522
<                     //builder.CreateNormals = false;
<                     builder.Normals = null;
---
>                     builder.CreateNormals = false;
589c526
<                 if (builder.HasTexCoords && vti - 1 >= this.TextureCoordinates.Count)
---
>                 if (builder.CreateTextureCoordinates && vti - 1 >= this.TextureCoordinates.Count)
596c533,535
<                     throw new FileFormatException(string.Format("Invalid texture coordinate index ({0}) on line {1}.", vti, this.currentLineNo));
---
>                     throw new FileFormatException(
>                             string.Format(
>                                 "Invalid texture coordinate index ({0}) on line {1}.", vti, this.currentLineNo));
600c539
<                 if (builder.HasNormals && vni - 1 >= this.Normals.Count)
---
>                 if (builder.CreateNormals && vni - 1 >= this.Normals.Count)
607c546,547
<                     throw new FileFormatException(string.Format("Invalid normal index ({0}) on line {1}.", vni, this.currentLineNo));
---
>                     throw new FileFormatException(
>                             string.Format("Invalid normal index ({0}) on line {1}.", vni, this.currentLineNo));
641c581
<                     if (builder.HasTexCoords)
---
>                     if (builder.CreateTextureCoordinates)
647c587
<                     if (builder.HasNormals)
---
>                     if (builder.CreateNormals)
654,682c594
<             try
<             {
< 
< 
<                 if (faceIndices.Count < 3)
<                 {
<                     throw new HelixToolkitException("Polygon must have at least 3 indices!");
<                 }
< 
< 
<                 if (this.ModelInfo.Faces == MeshFaces.QuadPatches)
<                 {
<                     if (faceIndices.Count == 3)
<                     {
<                         faceIndices.Add(faceIndices.Last());
<                         builder.AddQuad(faceIndices);
<                     }
<                     if (faceIndices.Count == 4)
<                     {
<                         builder.AddQuad(faceIndices);
<                     }
<                     else
<                     {
<                         // add triangles by cutting ears algorithm
<                         // this algorithm is quite expensive...
<                         builder.AddPolygonByCuttingEars(faceIndices);
<                     }
<                 }
<                 else
---
>             if (faceIndices.Count <= 4)
684,691c596,597
<                     if (faceIndices.Count == 3)
<                     {
<                         builder.AddTriangle(faceIndices);
<                     }
<                     else if (faceIndices.Count == 4)
<                     {
<                         //builder.AddQuad(faceIndices);
<                         builder.AddTriangleFan(faceIndices);
---
>                 // add triangles or quads
>                 builder.AddPolygon(faceIndices);
700,708d605
<             }
<             catch (Exception ex)
<             {
< 
<                 System.Windows.MessageBox.Show(string.Format("Error composing polygonal object: {0}", ex.Message), "Error", MessageBoxButton.OKCancel);
<             }
< 
<             Console.WriteLine();
<         }
719c616
<             this.Normals.Add(new Vector3D((float)fields[0], (float)fields[1], (float)fields[2]));
---
>             this.Normals.Add(new Vector3D(fields[0], fields[1], fields[2]));
731c628
<             this.TextureCoordinates.Add(new Point((float)fields[0], 1 - (float)fields[1]));
---
>             this.TextureCoordinates.Add(new Point(fields[0], 1 - fields[1]));
743c640
<             this.Points.Add(new Point3D((float)fields[0], (float)fields[1], (float)fields[2]));
---
>             this.Points.Add(new Point3D(fields[0], fields[1], fields[2]));
749,752c646,650
<         /// <returns>
<         /// A Model3D object.
<         /// </returns>
<         private Object3DGroup BuildModel()
---
>         /// <returns>A Model3D object.</returns>
>         private Model3DGroup BuildModel()
>         {
>             Model3DGroup modelGroup = null;
>             this.Dispatch(() =>
754c652
<             var modelGroup = new Object3DGroup();
---
>                     modelGroup = new Model3DGroup();
757c655,657
<                 foreach (var gm in g.CreateModels(this.ModelInfo))
---
>                         foreach (var gm in g.CreateModels())
>                         {
>                             if (this.Freeze)
759c659,662
<                     modelGroup.Add(gm);
---
>                                 gm.Freeze();
>                             }
> 
>                             modelGroup.Children.Add(gm);
762a666,670
>                     if (this.Freeze)
>                     {
>                         modelGroup.Freeze();
>                     }
>                 });
780c688,693
<                 return mat.GetMaterial(this.TexturePath);
---
>                 Material m = null;
>                 this.Dispatch(() =>
>                     {
>                         m = mat.GetMaterial(this.TexturePath);
>                     });
>                 return m;
783c696
<             return PhongMaterials.DefaultVRML;// MaterialHelper.CreateMaterial(new SolidColorBrush(this.DefaultColor));
---
>             return this.DefaultMaterial;
790c703
<         /// The mtl file.
---
>         /// The material file name.
800c713
<             using (var mreader = new StreamReader(path))
---
>             using (var materialReader = new StreamReader(path))
804c717
<                 while (!mreader.EndOfStream)
---
>                 while (!materialReader.EndOfStream)
806c719
<                     var line = mreader.ReadLine();
---
>                     var line = materialReader.ReadLine();
827c740
<                                 currentMaterial = new MaterialDefinition();
---
>                                 currentMaterial = new MaterialDefinition(value);
930c843
<             this.CurrentGroup.Material = this.GetMaterial(materialName);
---
>             this.CurrentGroup.Material = this.CurrentMaterial = this.GetMaterial(materialName);
933,934d845
< 
< 
943c854
<             private readonly IList<MeshBuilder> meshBuilders;
---
>             private readonly List<MeshBuilder> meshBuilders;
948c859
<             private readonly IList<Material> materials;
---
>             private readonly List<Material> materials;
956c867,868
<             public Group(string name)
---
>             /// <param name="material">The material of the group.</param>
>             public Group(string name, Material material)
961c873
<                 this.AddMesh();
---
>                 this.AddMesh(material);
997c909,910
<             public void AddMesh()
---
>             /// <param name="material">The material of the group.</param>
>             public void AddMesh(Material material)
1001c914
<                 this.materials.Add(PhongMaterials.Green);
---
>                 this.materials.Add(material);
1008c921
<             public IEnumerable<Object3D> CreateModels(ModelInfo info)
---
>             public IEnumerable<Model3D> CreateModels()
1012,1020c925,928
<                     this.meshBuilders[i].ComputeNormalsAndTangents(info.Faces, true);
<                     yield return new Object3D
<                     {
< 
<                         Geometry = this.meshBuilders[i].ToMeshGeometry3D(),
<                         Material = this.materials[i],
<                         Transform = Matrix.Identity,
<                         //BackMaterial = this.materials[i]
<                     };
---
>                     var material = this.materials[i];
>                     var mesh = this.meshBuilders[i].ToMesh();
>                     var model = new GeometryModel3D { Geometry = mesh, Material = material, BackMaterial = material };
>                     yield return model;
1036c944,945
<             public MaterialDefinition()
---
>             /// <param name="name">The name.</param>
>             public MaterialDefinition(string name)
1037a947
>                 this.Name = name;
1092a1003,1010
>             /// Gets or sets the name of the material.
>             /// </summary>
>             /// <value>
>             /// The name.
>             /// </value>
>             public string Name { get; set; }
> 
>             /// <summary>
1130d1047
<                     //this.Material.Freeze();
1143,1153c1060,1061
<                 var mat = new PhongMaterial()
<                 {
<                     AmbientColor = this.Ambient,
<                     //AmbientMap = this.AmbientMap,
< 
<                     DiffuseColor = this.Diffuse,
<                     DiffuseMap = (this.DiffuseMap == null) ? null : LoadImage(this.DiffuseMap),                    
<                     
<                     SpecularColor = this.Specular,
<                     SpecularShininess = (float)this.SpecularCoefficient,
<                     //SpecularMap = this.SpecularMap,
---
>                 var mg = new MaterialGroup();
>                 mg.SetName(this.Name);
1155,1157c1063,1076
<                     NormalMap = (this.BumpMap == null) ? null : LoadImage(this.BumpMap),
<                     //Dissolved = this.Dissolved,
<                     //Illumination = this.Illumination,
---
>                 // add the diffuse component
>                 if (this.DiffuseMap == null)
>                 {
>                     var diffuseBrush = new SolidColorBrush(this.Diffuse) { Opacity = this.Dissolved };
>                     mg.Children.Add(new DiffuseMaterial(diffuseBrush));
>                 }
>                 else
>                 {
>                     var path = Path.Combine(texturePath, this.DiffuseMap);
>                     if (File.Exists(path))
>                     {
>                         mg.Children.Add(new DiffuseMaterial(this.CreateTextureBrush(path)));
>                     }
>                 }
1159c1078,1090
<                 };
---
>                 // add the ambient components
>                 if (this.AmbientMap == null)
>                 {
>                     // ambient material is not supported by WPF?
>                 }
>                 else
>                 {
>                     var path = Path.Combine(texturePath, this.AmbientMap);
>                     if (File.Exists(path))
>                     {
>                         mg.Children.Add(new EmissiveMaterial(this.CreateTextureBrush(path)));
>                     }
>                 }
1161,1162c1092,1095
<                 //return mg.Children.Count != 1 ? mg : mg.Children[0];
<                 return mat;
---
>                 // add the specular component
>                 if (this.Specular.R > 0 || this.Specular.G > 0 || this.Specular.B > 0)
>                 {
>                     mg.Children.Add(new SpecularMaterial(new SolidColorBrush(this.Specular), this.SpecularCoefficient));
1164a1098,1099
>                 return mg.Children.Count != 1 ? mg : mg.Children[0];
>             }
1166c1101,1106
<             private static BitmapImage LoadImage(string path)
---
>             /// <summary>
>             /// Creates a texture brush.
>             /// </summary>
>             /// <param name="path">The path.</param>
>             /// <returns>The brush.</returns>
>             private ImageBrush CreateTextureBrush(string path)
1168,1169c1108,1110
<                 var bmp = new BitmapImage(new Uri(@"./Media/"+path, UriKind.RelativeOrAbsolute));
<                 return bmp;
---
>                 var img = new BitmapImage(new Uri(path, UriKind.Relative));
>                 var textureBrush = new ImageBrush(img) { Opacity = this.Dissolved, ViewportUnits = BrushMappingMode.Absolute, TileMode = TileMode.Tile };
>                 return textureBrush;
1171d1111
< 
